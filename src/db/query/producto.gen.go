// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Mindia/Stock1/Stock/src/db/model"
)

func newProducto(db *gorm.DB) producto {
	_producto := producto{}

	_producto.productoDo.UseDB(db)
	_producto.productoDo.UseModel(&model.Producto{})

	tableName := _producto.productoDo.TableName()
	_producto.ALL = field.NewAsterisk(tableName)
	_producto.ID = field.NewInt32(tableName, "id")
	_producto.Nombre = field.NewString(tableName, "nombre")
	_producto.IDContenedor = field.NewInt32(tableName, "id_contenedor")
	_producto.Cantidad = field.NewInt32(tableName, "cantidad")

	_producto.fillFieldMap()

	return _producto
}

type producto struct {
	productoDo

	ALL          field.Asterisk
	ID           field.Int32
	Nombre       field.String
	IDContenedor field.Int32
	Cantidad     field.Int32

	fieldMap map[string]field.Expr
}

func (p producto) Table(newTableName string) *producto {
	p.productoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p producto) As(alias string) *producto {
	p.productoDo.DO = *(p.productoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *producto) updateTableName(table string) *producto {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Nombre = field.NewString(table, "nombre")
	p.IDContenedor = field.NewInt32(table, "id_contenedor")
	p.Cantidad = field.NewInt32(table, "cantidad")

	p.fillFieldMap()

	return p
}

func (p *producto) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *producto) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["nombre"] = p.Nombre
	p.fieldMap["id_contenedor"] = p.IDContenedor
	p.fieldMap["cantidad"] = p.Cantidad
}

func (p producto) clone(db *gorm.DB) producto {
	p.productoDo.ReplaceDB(db)
	return p
}

type productoDo struct{ gen.DO }

func (p productoDo) Debug() *productoDo {
	return p.withDO(p.DO.Debug())
}

func (p productoDo) WithContext(ctx context.Context) *productoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productoDo) ReadDB() *productoDo {
	return p.Clauses(dbresolver.Read)
}

func (p productoDo) WriteDB() *productoDo {
	return p.Clauses(dbresolver.Write)
}

func (p productoDo) Clauses(conds ...clause.Expression) *productoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productoDo) Returning(value interface{}, columns ...string) *productoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productoDo) Not(conds ...gen.Condition) *productoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productoDo) Or(conds ...gen.Condition) *productoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productoDo) Select(conds ...field.Expr) *productoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productoDo) Where(conds ...gen.Condition) *productoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *productoDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p productoDo) Order(conds ...field.Expr) *productoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productoDo) Distinct(cols ...field.Expr) *productoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productoDo) Omit(cols ...field.Expr) *productoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productoDo) Join(table schema.Tabler, on ...field.Expr) *productoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *productoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productoDo) RightJoin(table schema.Tabler, on ...field.Expr) *productoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productoDo) Group(cols ...field.Expr) *productoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productoDo) Having(conds ...gen.Condition) *productoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productoDo) Limit(limit int) *productoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productoDo) Offset(offset int) *productoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *productoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productoDo) Unscoped() *productoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productoDo) Create(values ...*model.Producto) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productoDo) CreateInBatches(values []*model.Producto, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productoDo) Save(values ...*model.Producto) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productoDo) First() (*model.Producto, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Producto), nil
	}
}

func (p productoDo) Take() (*model.Producto, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Producto), nil
	}
}

func (p productoDo) Last() (*model.Producto, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Producto), nil
	}
}

func (p productoDo) Find() ([]*model.Producto, error) {
	result, err := p.DO.Find()
	return result.([]*model.Producto), err
}

func (p productoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Producto, err error) {
	buf := make([]*model.Producto, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productoDo) FindInBatches(result *[]*model.Producto, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productoDo) Attrs(attrs ...field.AssignExpr) *productoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productoDo) Assign(attrs ...field.AssignExpr) *productoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productoDo) Joins(fields ...field.RelationField) *productoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productoDo) Preload(fields ...field.RelationField) *productoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productoDo) FirstOrInit() (*model.Producto, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Producto), nil
	}
}

func (p productoDo) FirstOrCreate() (*model.Producto, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Producto), nil
	}
}

func (p productoDo) FindByPage(offset int, limit int) (result []*model.Producto, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productoDo) Delete(models ...*model.Producto) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productoDo) withDO(do gen.Dao) *productoDo {
	p.DO = *do.(*gen.DO)
	return p
}
